// source: mint/v1beta1/mint.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.seiprotocol.seichain.mint.Minter', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.mint.Params', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.mint.ScheduledTokenRelease', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.mint.Version2Minter', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.mint.Version2Params', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.mint.Minter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.mint.Minter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.mint.Minter.displayName = 'proto.seiprotocol.seichain.mint.Minter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.mint.ScheduledTokenRelease = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.mint.ScheduledTokenRelease, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.mint.ScheduledTokenRelease.displayName = 'proto.seiprotocol.seichain.mint.ScheduledTokenRelease';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.mint.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seiprotocol.seichain.mint.Params.repeatedFields_, null);
};
goog.inherits(proto.seiprotocol.seichain.mint.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.mint.Params.displayName = 'proto.seiprotocol.seichain.mint.Params';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.mint.Version2Minter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.mint.Version2Minter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.mint.Version2Minter.displayName = 'proto.seiprotocol.seichain.mint.Version2Minter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.displayName = 'proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.mint.Version2Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seiprotocol.seichain.mint.Version2Params.repeatedFields_, null);
};
goog.inherits(proto.seiprotocol.seichain.mint.Version2Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.mint.Version2Params.displayName = 'proto.seiprotocol.seichain.mint.Version2Params';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.mint.Minter.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.mint.Minter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.mint.Minter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.mint.Minter.toObject = function(includeInstance, msg) {
  var f, obj = {
    startDate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    endDate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    denom: jspb.Message.getFieldWithDefault(msg, 3, ""),
    totalMintAmount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    remainingMintAmount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lastMintAmount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lastMintDate: jspb.Message.getFieldWithDefault(msg, 7, ""),
    lastMintHeight: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.mint.Minter}
 */
proto.seiprotocol.seichain.mint.Minter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.mint.Minter;
  return proto.seiprotocol.seichain.mint.Minter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.mint.Minter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.mint.Minter}
 */
proto.seiprotocol.seichain.mint.Minter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartDate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndDate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalMintAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRemainingMintAmount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastMintAmount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastMintDate(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastMintHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.mint.Minter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.mint.Minter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.mint.Minter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.mint.Minter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEndDate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTotalMintAmount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getRemainingMintAmount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getLastMintAmount();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getLastMintDate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLastMintHeight();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional string start_date = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.mint.Minter.prototype.getStartDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.mint.Minter} returns this
 */
proto.seiprotocol.seichain.mint.Minter.prototype.setStartDate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string end_date = 2;
 * @return {string}
 */
proto.seiprotocol.seichain.mint.Minter.prototype.getEndDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.mint.Minter} returns this
 */
proto.seiprotocol.seichain.mint.Minter.prototype.setEndDate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string denom = 3;
 * @return {string}
 */
proto.seiprotocol.seichain.mint.Minter.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.mint.Minter} returns this
 */
proto.seiprotocol.seichain.mint.Minter.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 total_mint_amount = 4;
 * @return {number}
 */
proto.seiprotocol.seichain.mint.Minter.prototype.getTotalMintAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.mint.Minter} returns this
 */
proto.seiprotocol.seichain.mint.Minter.prototype.setTotalMintAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 remaining_mint_amount = 5;
 * @return {number}
 */
proto.seiprotocol.seichain.mint.Minter.prototype.getRemainingMintAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.mint.Minter} returns this
 */
proto.seiprotocol.seichain.mint.Minter.prototype.setRemainingMintAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 last_mint_amount = 6;
 * @return {number}
 */
proto.seiprotocol.seichain.mint.Minter.prototype.getLastMintAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.mint.Minter} returns this
 */
proto.seiprotocol.seichain.mint.Minter.prototype.setLastMintAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string last_mint_date = 7;
 * @return {string}
 */
proto.seiprotocol.seichain.mint.Minter.prototype.getLastMintDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.mint.Minter} returns this
 */
proto.seiprotocol.seichain.mint.Minter.prototype.setLastMintDate = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 last_mint_height = 8;
 * @return {number}
 */
proto.seiprotocol.seichain.mint.Minter.prototype.getLastMintHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.mint.Minter} returns this
 */
proto.seiprotocol.seichain.mint.Minter.prototype.setLastMintHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.mint.ScheduledTokenRelease.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.mint.ScheduledTokenRelease.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.mint.ScheduledTokenRelease} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.mint.ScheduledTokenRelease.toObject = function(includeInstance, msg) {
  var f, obj = {
    startDate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    endDate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tokenReleaseAmount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.mint.ScheduledTokenRelease}
 */
proto.seiprotocol.seichain.mint.ScheduledTokenRelease.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.mint.ScheduledTokenRelease;
  return proto.seiprotocol.seichain.mint.ScheduledTokenRelease.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.mint.ScheduledTokenRelease} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.mint.ScheduledTokenRelease}
 */
proto.seiprotocol.seichain.mint.ScheduledTokenRelease.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartDate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndDate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTokenReleaseAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.mint.ScheduledTokenRelease.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.mint.ScheduledTokenRelease.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.mint.ScheduledTokenRelease} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.mint.ScheduledTokenRelease.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEndDate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTokenReleaseAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string start_date = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.mint.ScheduledTokenRelease.prototype.getStartDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.mint.ScheduledTokenRelease} returns this
 */
proto.seiprotocol.seichain.mint.ScheduledTokenRelease.prototype.setStartDate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string end_date = 2;
 * @return {string}
 */
proto.seiprotocol.seichain.mint.ScheduledTokenRelease.prototype.getEndDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.mint.ScheduledTokenRelease} returns this
 */
proto.seiprotocol.seichain.mint.ScheduledTokenRelease.prototype.setEndDate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 token_release_amount = 3;
 * @return {number}
 */
proto.seiprotocol.seichain.mint.ScheduledTokenRelease.prototype.getTokenReleaseAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.mint.ScheduledTokenRelease} returns this
 */
proto.seiprotocol.seichain.mint.ScheduledTokenRelease.prototype.setTokenReleaseAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seiprotocol.seichain.mint.Params.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.mint.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.mint.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.mint.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.mint.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    mintDenom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenReleaseScheduleList: jspb.Message.toObjectList(msg.getTokenReleaseScheduleList(),
    proto.seiprotocol.seichain.mint.ScheduledTokenRelease.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.mint.Params}
 */
proto.seiprotocol.seichain.mint.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.mint.Params;
  return proto.seiprotocol.seichain.mint.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.mint.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.mint.Params}
 */
proto.seiprotocol.seichain.mint.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMintDenom(value);
      break;
    case 2:
      var value = new proto.seiprotocol.seichain.mint.ScheduledTokenRelease;
      reader.readMessage(value,proto.seiprotocol.seichain.mint.ScheduledTokenRelease.deserializeBinaryFromReader);
      msg.addTokenReleaseSchedule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.mint.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.mint.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.mint.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.mint.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMintDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenReleaseScheduleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.seiprotocol.seichain.mint.ScheduledTokenRelease.serializeBinaryToWriter
    );
  }
};


/**
 * optional string mint_denom = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.mint.Params.prototype.getMintDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.mint.Params} returns this
 */
proto.seiprotocol.seichain.mint.Params.prototype.setMintDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ScheduledTokenRelease token_release_schedule = 2;
 * @return {!Array<!proto.seiprotocol.seichain.mint.ScheduledTokenRelease>}
 */
proto.seiprotocol.seichain.mint.Params.prototype.getTokenReleaseScheduleList = function() {
  return /** @type{!Array<!proto.seiprotocol.seichain.mint.ScheduledTokenRelease>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seiprotocol.seichain.mint.ScheduledTokenRelease, 2));
};


/**
 * @param {!Array<!proto.seiprotocol.seichain.mint.ScheduledTokenRelease>} value
 * @return {!proto.seiprotocol.seichain.mint.Params} returns this
*/
proto.seiprotocol.seichain.mint.Params.prototype.setTokenReleaseScheduleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.seiprotocol.seichain.mint.ScheduledTokenRelease=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.mint.ScheduledTokenRelease}
 */
proto.seiprotocol.seichain.mint.Params.prototype.addTokenReleaseSchedule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.seiprotocol.seichain.mint.ScheduledTokenRelease, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.mint.Params} returns this
 */
proto.seiprotocol.seichain.mint.Params.prototype.clearTokenReleaseScheduleList = function() {
  return this.setTokenReleaseScheduleList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.mint.Version2Minter.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.mint.Version2Minter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.mint.Version2Minter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.mint.Version2Minter.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastMintAmount: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastMintDate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastMintHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    denom: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.mint.Version2Minter}
 */
proto.seiprotocol.seichain.mint.Version2Minter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.mint.Version2Minter;
  return proto.seiprotocol.seichain.mint.Version2Minter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.mint.Version2Minter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.mint.Version2Minter}
 */
proto.seiprotocol.seichain.mint.Version2Minter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastMintAmount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastMintDate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastMintHeight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.mint.Version2Minter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.mint.Version2Minter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.mint.Version2Minter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.mint.Version2Minter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastMintAmount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastMintDate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastMintHeight();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string last_mint_amount = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.mint.Version2Minter.prototype.getLastMintAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.mint.Version2Minter} returns this
 */
proto.seiprotocol.seichain.mint.Version2Minter.prototype.setLastMintAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string last_mint_date = 2;
 * @return {string}
 */
proto.seiprotocol.seichain.mint.Version2Minter.prototype.getLastMintDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.mint.Version2Minter} returns this
 */
proto.seiprotocol.seichain.mint.Version2Minter.prototype.setLastMintDate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 last_mint_height = 3;
 * @return {number}
 */
proto.seiprotocol.seichain.mint.Version2Minter.prototype.getLastMintHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.mint.Version2Minter} returns this
 */
proto.seiprotocol.seichain.mint.Version2Minter.prototype.setLastMintHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string denom = 4;
 * @return {string}
 */
proto.seiprotocol.seichain.mint.Version2Minter.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.mint.Version2Minter} returns this
 */
proto.seiprotocol.seichain.mint.Version2Minter.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenReleaseAmount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease}
 */
proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease;
  return proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease}
 */
proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTokenReleaseAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenReleaseAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string date = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease} returns this
 */
proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.prototype.setDate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 token_release_amount = 2;
 * @return {number}
 */
proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.prototype.getTokenReleaseAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease} returns this
 */
proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.prototype.setTokenReleaseAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seiprotocol.seichain.mint.Version2Params.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.mint.Version2Params.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.mint.Version2Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.mint.Version2Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.mint.Version2Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    mintDenom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenReleaseScheduleList: jspb.Message.toObjectList(msg.getTokenReleaseScheduleList(),
    proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.mint.Version2Params}
 */
proto.seiprotocol.seichain.mint.Version2Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.mint.Version2Params;
  return proto.seiprotocol.seichain.mint.Version2Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.mint.Version2Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.mint.Version2Params}
 */
proto.seiprotocol.seichain.mint.Version2Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMintDenom(value);
      break;
    case 2:
      var value = new proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease;
      reader.readMessage(value,proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.deserializeBinaryFromReader);
      msg.addTokenReleaseSchedule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.mint.Version2Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.mint.Version2Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.mint.Version2Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.mint.Version2Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMintDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenReleaseScheduleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease.serializeBinaryToWriter
    );
  }
};


/**
 * optional string mint_denom = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.mint.Version2Params.prototype.getMintDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.mint.Version2Params} returns this
 */
proto.seiprotocol.seichain.mint.Version2Params.prototype.setMintDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Version2ScheduledTokenRelease token_release_schedule = 2;
 * @return {!Array<!proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease>}
 */
proto.seiprotocol.seichain.mint.Version2Params.prototype.getTokenReleaseScheduleList = function() {
  return /** @type{!Array<!proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease, 2));
};


/**
 * @param {!Array<!proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease>} value
 * @return {!proto.seiprotocol.seichain.mint.Version2Params} returns this
*/
proto.seiprotocol.seichain.mint.Version2Params.prototype.setTokenReleaseScheduleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease}
 */
proto.seiprotocol.seichain.mint.Version2Params.prototype.addTokenReleaseSchedule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.seiprotocol.seichain.mint.Version2ScheduledTokenRelease, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.mint.Version2Params} returns this
 */
proto.seiprotocol.seichain.mint.Version2Params.prototype.clearTokenReleaseScheduleList = function() {
  return this.setTokenReleaseScheduleList([]);
};


goog.object.extend(exports, proto.seiprotocol.seichain.mint);
