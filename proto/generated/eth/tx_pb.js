// source: eth/tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var gogoproto_gogo_pb = require('../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.seiprotocol.seichain.eth.AccessListTx', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.eth.AccessTuple', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.eth.AssociateTx', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.eth.BlobTx', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.eth.BlobTxSidecar', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.eth.DynamicFeeTx', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.eth.LegacyTx', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.eth.AccessTuple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seiprotocol.seichain.eth.AccessTuple.repeatedFields_, null);
};
goog.inherits(proto.seiprotocol.seichain.eth.AccessTuple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.eth.AccessTuple.displayName = 'proto.seiprotocol.seichain.eth.AccessTuple';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.eth.AssociateTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.eth.AssociateTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.eth.AssociateTx.displayName = 'proto.seiprotocol.seichain.eth.AssociateTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.eth.LegacyTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.eth.LegacyTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.eth.LegacyTx.displayName = 'proto.seiprotocol.seichain.eth.LegacyTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.eth.AccessListTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seiprotocol.seichain.eth.AccessListTx.repeatedFields_, null);
};
goog.inherits(proto.seiprotocol.seichain.eth.AccessListTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.eth.AccessListTx.displayName = 'proto.seiprotocol.seichain.eth.AccessListTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seiprotocol.seichain.eth.DynamicFeeTx.repeatedFields_, null);
};
goog.inherits(proto.seiprotocol.seichain.eth.DynamicFeeTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.eth.DynamicFeeTx.displayName = 'proto.seiprotocol.seichain.eth.DynamicFeeTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.eth.BlobTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seiprotocol.seichain.eth.BlobTx.repeatedFields_, null);
};
goog.inherits(proto.seiprotocol.seichain.eth.BlobTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.eth.BlobTx.displayName = 'proto.seiprotocol.seichain.eth.BlobTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seiprotocol.seichain.eth.BlobTxSidecar.repeatedFields_, null);
};
goog.inherits(proto.seiprotocol.seichain.eth.BlobTxSidecar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.eth.BlobTxSidecar.displayName = 'proto.seiprotocol.seichain.eth.BlobTxSidecar';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx.displayName = 'proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seiprotocol.seichain.eth.AccessTuple.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.eth.AccessTuple.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.eth.AccessTuple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.eth.AccessTuple} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.AccessTuple.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    storageKeysList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.eth.AccessTuple}
 */
proto.seiprotocol.seichain.eth.AccessTuple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.eth.AccessTuple;
  return proto.seiprotocol.seichain.eth.AccessTuple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.eth.AccessTuple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.eth.AccessTuple}
 */
proto.seiprotocol.seichain.eth.AccessTuple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addStorageKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.AccessTuple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.eth.AccessTuple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.eth.AccessTuple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.AccessTuple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStorageKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.AccessTuple.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.AccessTuple} returns this
 */
proto.seiprotocol.seichain.eth.AccessTuple.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string storage_keys = 2;
 * @return {!Array<string>}
 */
proto.seiprotocol.seichain.eth.AccessTuple.prototype.getStorageKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.seiprotocol.seichain.eth.AccessTuple} returns this
 */
proto.seiprotocol.seichain.eth.AccessTuple.prototype.setStorageKeysList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.eth.AccessTuple} returns this
 */
proto.seiprotocol.seichain.eth.AccessTuple.prototype.addStorageKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.eth.AccessTuple} returns this
 */
proto.seiprotocol.seichain.eth.AccessTuple.prototype.clearStorageKeysList = function() {
  return this.setStorageKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.eth.AssociateTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.eth.AssociateTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.AssociateTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    v: msg.getV_asB64(),
    r: msg.getR_asB64(),
    s: msg.getS_asB64(),
    customMessage: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.eth.AssociateTx}
 */
proto.seiprotocol.seichain.eth.AssociateTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.eth.AssociateTx;
  return proto.seiprotocol.seichain.eth.AssociateTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.eth.AssociateTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.eth.AssociateTx}
 */
proto.seiprotocol.seichain.eth.AssociateTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setV(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setR(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.eth.AssociateTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.eth.AssociateTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.AssociateTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getV_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getS_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getCustomMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bytes v = 1;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.getV = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes v = 1;
 * This is a type-conversion wrapper around `getV()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.getV_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getV()));
};


/**
 * optional bytes v = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getV()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.getV_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getV()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.AssociateTx} returns this
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.setV = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes r = 2;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.getR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes r = 2;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.getR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getR()));
};


/**
 * optional bytes r = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.getR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.AssociateTx} returns this
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.setR = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes s = 3;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.getS = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes s = 3;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes s = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.AssociateTx} returns this
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.setS = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string custom_message = 4;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.getCustomMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.AssociateTx} returns this
 */
proto.seiprotocol.seichain.eth.AssociateTx.prototype.setCustomMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.eth.LegacyTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.eth.LegacyTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.LegacyTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gasPrice: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    to: jspb.Message.getFieldWithDefault(msg, 4, ""),
    value: jspb.Message.getFieldWithDefault(msg, 5, ""),
    data: msg.getData_asB64(),
    v: msg.getV_asB64(),
    r: msg.getR_asB64(),
    s: msg.getS_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.eth.LegacyTx}
 */
proto.seiprotocol.seichain.eth.LegacyTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.eth.LegacyTx;
  return proto.seiprotocol.seichain.eth.LegacyTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.eth.LegacyTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.eth.LegacyTx}
 */
proto.seiprotocol.seichain.eth.LegacyTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasPrice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setV(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setR(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.eth.LegacyTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.eth.LegacyTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.LegacyTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getGasPrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getV_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getS_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.eth.LegacyTx} returns this
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string gas_price = 2;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getGasPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.LegacyTx} returns this
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.setGasPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 gas_limit = 3;
 * @return {number}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.eth.LegacyTx} returns this
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.setGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string to = 4;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.LegacyTx} returns this
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string value = 5;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.LegacyTx} returns this
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.LegacyTx} returns this
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes v = 7;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getV = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes v = 7;
 * This is a type-conversion wrapper around `getV()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getV_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getV()));
};


/**
 * optional bytes v = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getV()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getV_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getV()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.LegacyTx} returns this
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.setV = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes r = 8;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes r = 8;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getR()));
};


/**
 * optional bytes r = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.LegacyTx} returns this
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.setR = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes s = 9;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getS = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes s = 9;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes s = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.LegacyTx} returns this
 */
proto.seiprotocol.seichain.eth.LegacyTx.prototype.setS = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seiprotocol.seichain.eth.AccessListTx.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.eth.AccessListTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.eth.AccessListTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.AccessListTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gasPrice: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    to: jspb.Message.getFieldWithDefault(msg, 5, ""),
    value: jspb.Message.getFieldWithDefault(msg, 6, ""),
    data: msg.getData_asB64(),
    accessesList: jspb.Message.toObjectList(msg.getAccessesList(),
    proto.seiprotocol.seichain.eth.AccessTuple.toObject, includeInstance),
    v: msg.getV_asB64(),
    r: msg.getR_asB64(),
    s: msg.getS_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx}
 */
proto.seiprotocol.seichain.eth.AccessListTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.eth.AccessListTx;
  return proto.seiprotocol.seichain.eth.AccessListTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.eth.AccessListTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx}
 */
proto.seiprotocol.seichain.eth.AccessListTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasPrice(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 8:
      var value = new proto.seiprotocol.seichain.eth.AccessTuple;
      reader.readMessage(value,proto.seiprotocol.seichain.eth.AccessTuple.deserializeBinaryFromReader);
      msg.addAccesses(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setV(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setR(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.eth.AccessListTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.eth.AccessListTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.AccessListTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGasPrice();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getAccessesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.seiprotocol.seichain.eth.AccessTuple.serializeBinaryToWriter
    );
  }
  f = message.getV_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getS_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx} returns this
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx} returns this
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string gas_price = 3;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getGasPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx} returns this
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.setGasPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 gas_limit = 4;
 * @return {number}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx} returns this
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.setGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string to = 5;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx} returns this
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string value = 6;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx} returns this
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes data = 7;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes data = 7;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx} returns this
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * repeated AccessTuple accesses = 8;
 * @return {!Array<!proto.seiprotocol.seichain.eth.AccessTuple>}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getAccessesList = function() {
  return /** @type{!Array<!proto.seiprotocol.seichain.eth.AccessTuple>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seiprotocol.seichain.eth.AccessTuple, 8));
};


/**
 * @param {!Array<!proto.seiprotocol.seichain.eth.AccessTuple>} value
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx} returns this
*/
proto.seiprotocol.seichain.eth.AccessListTx.prototype.setAccessesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.seiprotocol.seichain.eth.AccessTuple=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.eth.AccessTuple}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.addAccesses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.seiprotocol.seichain.eth.AccessTuple, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx} returns this
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.clearAccessesList = function() {
  return this.setAccessesList([]);
};


/**
 * optional bytes v = 9;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getV = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes v = 9;
 * This is a type-conversion wrapper around `getV()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getV_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getV()));
};


/**
 * optional bytes v = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getV()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getV_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getV()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx} returns this
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.setV = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes r = 10;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes r = 10;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getR()));
};


/**
 * optional bytes r = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx} returns this
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.setR = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes s = 11;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getS = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes s = 11;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes s = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.AccessListTx} returns this
 */
proto.seiprotocol.seichain.eth.AccessListTx.prototype.setS = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.eth.DynamicFeeTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.eth.DynamicFeeTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gasTipCap: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gasFeeCap: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    to: jspb.Message.getFieldWithDefault(msg, 6, ""),
    value: jspb.Message.getFieldWithDefault(msg, 7, ""),
    data: msg.getData_asB64(),
    accessesList: jspb.Message.toObjectList(msg.getAccessesList(),
    proto.seiprotocol.seichain.eth.AccessTuple.toObject, includeInstance),
    v: msg.getV_asB64(),
    r: msg.getR_asB64(),
    s: msg.getS_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.eth.DynamicFeeTx;
  return proto.seiprotocol.seichain.eth.DynamicFeeTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.eth.DynamicFeeTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasTipCap(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasFeeCap(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 9:
      var value = new proto.seiprotocol.seichain.eth.AccessTuple;
      reader.readMessage(value,proto.seiprotocol.seichain.eth.AccessTuple.deserializeBinaryFromReader);
      msg.addAccesses(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setV(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setR(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.eth.DynamicFeeTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.eth.DynamicFeeTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGasTipCap();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGasFeeCap();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getAccessesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.seiprotocol.seichain.eth.AccessTuple.serializeBinaryToWriter
    );
  }
  f = message.getV_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getS_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx} returns this
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx} returns this
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string gas_tip_cap = 3;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getGasTipCap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx} returns this
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.setGasTipCap = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string gas_fee_cap = 4;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getGasFeeCap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx} returns this
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.setGasFeeCap = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 gas_limit = 5;
 * @return {number}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx} returns this
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.setGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string to = 6;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx} returns this
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string value = 7;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx} returns this
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bytes data = 8;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes data = 8;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx} returns this
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * repeated AccessTuple accesses = 9;
 * @return {!Array<!proto.seiprotocol.seichain.eth.AccessTuple>}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getAccessesList = function() {
  return /** @type{!Array<!proto.seiprotocol.seichain.eth.AccessTuple>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seiprotocol.seichain.eth.AccessTuple, 9));
};


/**
 * @param {!Array<!proto.seiprotocol.seichain.eth.AccessTuple>} value
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx} returns this
*/
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.setAccessesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.seiprotocol.seichain.eth.AccessTuple=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.eth.AccessTuple}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.addAccesses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.seiprotocol.seichain.eth.AccessTuple, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx} returns this
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.clearAccessesList = function() {
  return this.setAccessesList([]);
};


/**
 * optional bytes v = 10;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getV = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes v = 10;
 * This is a type-conversion wrapper around `getV()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getV_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getV()));
};


/**
 * optional bytes v = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getV()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getV_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getV()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx} returns this
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.setV = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes r = 11;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes r = 11;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getR()));
};


/**
 * optional bytes r = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx} returns this
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.setR = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes s = 12;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getS = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes s = 12;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes s = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.DynamicFeeTx} returns this
 */
proto.seiprotocol.seichain.eth.DynamicFeeTx.prototype.setS = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seiprotocol.seichain.eth.BlobTx.repeatedFields_ = [9,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.eth.BlobTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.eth.BlobTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.BlobTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gasTipCap: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gasFeeCap: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    to: jspb.Message.getFieldWithDefault(msg, 6, ""),
    value: jspb.Message.getFieldWithDefault(msg, 7, ""),
    data: msg.getData_asB64(),
    accessesList: jspb.Message.toObjectList(msg.getAccessesList(),
    proto.seiprotocol.seichain.eth.AccessTuple.toObject, includeInstance),
    blobFeeCap: jspb.Message.getFieldWithDefault(msg, 10, ""),
    blobHashesList: msg.getBlobHashesList_asB64(),
    sidecar: (f = msg.getSidecar()) && proto.seiprotocol.seichain.eth.BlobTxSidecar.toObject(includeInstance, f),
    v: msg.getV_asB64(),
    r: msg.getR_asB64(),
    s: msg.getS_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.eth.BlobTx}
 */
proto.seiprotocol.seichain.eth.BlobTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.eth.BlobTx;
  return proto.seiprotocol.seichain.eth.BlobTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.eth.BlobTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.eth.BlobTx}
 */
proto.seiprotocol.seichain.eth.BlobTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasTipCap(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasFeeCap(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasLimit(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 9:
      var value = new proto.seiprotocol.seichain.eth.AccessTuple;
      reader.readMessage(value,proto.seiprotocol.seichain.eth.AccessTuple.deserializeBinaryFromReader);
      msg.addAccesses(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlobFeeCap(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addBlobHashes(value);
      break;
    case 12:
      var value = new proto.seiprotocol.seichain.eth.BlobTxSidecar;
      reader.readMessage(value,proto.seiprotocol.seichain.eth.BlobTxSidecar.deserializeBinaryFromReader);
      msg.setSidecar(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setV(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setR(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.eth.BlobTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.eth.BlobTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.BlobTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGasTipCap();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGasFeeCap();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getAccessesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.seiprotocol.seichain.eth.AccessTuple.serializeBinaryToWriter
    );
  }
  f = message.getBlobFeeCap();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getBlobHashesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      11,
      f
    );
  }
  f = message.getSidecar();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.seiprotocol.seichain.eth.BlobTxSidecar.serializeBinaryToWriter
    );
  }
  f = message.getV_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getR_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getS_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
};


/**
 * optional string chain_id = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string gas_tip_cap = 3;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getGasTipCap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.setGasTipCap = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string gas_fee_cap = 4;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getGasFeeCap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.setGasFeeCap = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 gas_limit = 5;
 * @return {number}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.setGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string to = 6;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string value = 7;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bytes data = 8;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes data = 8;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * repeated AccessTuple accesses = 9;
 * @return {!Array<!proto.seiprotocol.seichain.eth.AccessTuple>}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getAccessesList = function() {
  return /** @type{!Array<!proto.seiprotocol.seichain.eth.AccessTuple>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seiprotocol.seichain.eth.AccessTuple, 9));
};


/**
 * @param {!Array<!proto.seiprotocol.seichain.eth.AccessTuple>} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
*/
proto.seiprotocol.seichain.eth.BlobTx.prototype.setAccessesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.seiprotocol.seichain.eth.AccessTuple=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.eth.AccessTuple}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.addAccesses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.seiprotocol.seichain.eth.AccessTuple, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.clearAccessesList = function() {
  return this.setAccessesList([]);
};


/**
 * optional string blob_fee_cap = 10;
 * @return {string}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getBlobFeeCap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.setBlobFeeCap = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * repeated bytes blob_hashes = 11;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getBlobHashesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * repeated bytes blob_hashes = 11;
 * This is a type-conversion wrapper around `getBlobHashesList()`
 * @return {!Array<string>}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getBlobHashesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getBlobHashesList()));
};


/**
 * repeated bytes blob_hashes = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlobHashesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getBlobHashesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getBlobHashesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.setBlobHashesList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.addBlobHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.clearBlobHashesList = function() {
  return this.setBlobHashesList([]);
};


/**
 * optional BlobTxSidecar sidecar = 12;
 * @return {?proto.seiprotocol.seichain.eth.BlobTxSidecar}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getSidecar = function() {
  return /** @type{?proto.seiprotocol.seichain.eth.BlobTxSidecar} */ (
    jspb.Message.getWrapperField(this, proto.seiprotocol.seichain.eth.BlobTxSidecar, 12));
};


/**
 * @param {?proto.seiprotocol.seichain.eth.BlobTxSidecar|undefined} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
*/
proto.seiprotocol.seichain.eth.BlobTx.prototype.setSidecar = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.clearSidecar = function() {
  return this.setSidecar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.hasSidecar = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bytes v = 13;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getV = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes v = 13;
 * This is a type-conversion wrapper around `getV()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getV_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getV()));
};


/**
 * optional bytes v = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getV()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getV_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getV()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.setV = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes r = 14;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes r = 14;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getR()));
};


/**
 * optional bytes r = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.setR = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional bytes s = 15;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getS = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes s = 15;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes s = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTx} returns this
 */
proto.seiprotocol.seichain.eth.BlobTx.prototype.setS = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.eth.BlobTxSidecar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.eth.BlobTxSidecar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.toObject = function(includeInstance, msg) {
  var f, obj = {
    blobsList: msg.getBlobsList_asB64(),
    commitmentsList: msg.getCommitmentsList_asB64(),
    proofsList: msg.getProofsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.eth.BlobTxSidecar}
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.eth.BlobTxSidecar;
  return proto.seiprotocol.seichain.eth.BlobTxSidecar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.eth.BlobTxSidecar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.eth.BlobTxSidecar}
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addBlobs(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addCommitments(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addProofs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.eth.BlobTxSidecar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.eth.BlobTxSidecar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlobsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getCommitmentsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getProofsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * repeated bytes blobs = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.getBlobsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes blobs = 1;
 * This is a type-conversion wrapper around `getBlobsList()`
 * @return {!Array<string>}
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.getBlobsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getBlobsList()));
};


/**
 * repeated bytes blobs = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlobsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.getBlobsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getBlobsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTxSidecar} returns this
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.setBlobsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.eth.BlobTxSidecar} returns this
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.addBlobs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.eth.BlobTxSidecar} returns this
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.clearBlobsList = function() {
  return this.setBlobsList([]);
};


/**
 * repeated bytes commitments = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.getCommitmentsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes commitments = 2;
 * This is a type-conversion wrapper around `getCommitmentsList()`
 * @return {!Array<string>}
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.getCommitmentsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getCommitmentsList()));
};


/**
 * repeated bytes commitments = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCommitmentsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.getCommitmentsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getCommitmentsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTxSidecar} returns this
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.setCommitmentsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.eth.BlobTxSidecar} returns this
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.addCommitments = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.eth.BlobTxSidecar} returns this
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.clearCommitmentsList = function() {
  return this.setCommitmentsList([]);
};


/**
 * repeated bytes proofs = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.getProofsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes proofs = 3;
 * This is a type-conversion wrapper around `getProofsList()`
 * @return {!Array<string>}
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.getProofsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getProofsList()));
};


/**
 * repeated bytes proofs = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.getProofsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getProofsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.seiprotocol.seichain.eth.BlobTxSidecar} returns this
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.setProofsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.eth.BlobTxSidecar} returns this
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.addProofs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.eth.BlobTxSidecar} returns this
 */
proto.seiprotocol.seichain.eth.BlobTxSidecar.prototype.clearProofsList = function() {
  return this.setProofsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx}
 */
proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx;
  return proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx}
 */
proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.eth.ExtensionOptionsEthereumTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.seiprotocol.seichain.eth);
