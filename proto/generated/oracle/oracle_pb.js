// source: oracle/oracle.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var gogoproto_gogo_pb = require('../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cosmos_base_v1beta1_coin_pb = require('../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
goog.exportSymbol('proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.oracle.Denom', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.oracle.ExchangeRateTuple', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.oracle.OracleExchangeRate', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.oracle.OracleTwap', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.oracle.Params', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.oracle.PriceSnapshot', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.oracle.PriceSnapshotItem', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.oracle.VotePenaltyCounter', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.oracle.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seiprotocol.seichain.oracle.Params.repeatedFields_, null);
};
goog.inherits(proto.seiprotocol.seichain.oracle.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.oracle.Params.displayName = 'proto.seiprotocol.seichain.oracle.Params';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.oracle.Denom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.oracle.Denom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.oracle.Denom.displayName = 'proto.seiprotocol.seichain.oracle.Denom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.repeatedFields_, null);
};
goog.inherits(proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.displayName = 'proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.oracle.ExchangeRateTuple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.oracle.ExchangeRateTuple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.oracle.ExchangeRateTuple.displayName = 'proto.seiprotocol.seichain.oracle.ExchangeRateTuple';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.oracle.OracleExchangeRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.oracle.OracleExchangeRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.oracle.OracleExchangeRate.displayName = 'proto.seiprotocol.seichain.oracle.OracleExchangeRate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.oracle.PriceSnapshotItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.oracle.PriceSnapshotItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.oracle.PriceSnapshotItem.displayName = 'proto.seiprotocol.seichain.oracle.PriceSnapshotItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.oracle.PriceSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seiprotocol.seichain.oracle.PriceSnapshot.repeatedFields_, null);
};
goog.inherits(proto.seiprotocol.seichain.oracle.PriceSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.oracle.PriceSnapshot.displayName = 'proto.seiprotocol.seichain.oracle.PriceSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.oracle.OracleTwap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.oracle.OracleTwap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.oracle.OracleTwap.displayName = 'proto.seiprotocol.seichain.oracle.OracleTwap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.oracle.VotePenaltyCounter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.oracle.VotePenaltyCounter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.oracle.VotePenaltyCounter.displayName = 'proto.seiprotocol.seichain.oracle.VotePenaltyCounter';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seiprotocol.seichain.oracle.Params.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.oracle.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.oracle.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.oracle.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    votePeriod: jspb.Message.getFieldWithDefault(msg, 1, 0),
    voteThreshold: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rewardBand: jspb.Message.getFieldWithDefault(msg, 3, ""),
    whitelistList: jspb.Message.toObjectList(msg.getWhitelistList(),
    proto.seiprotocol.seichain.oracle.Denom.toObject, includeInstance),
    slashFraction: jspb.Message.getFieldWithDefault(msg, 5, ""),
    slashWindow: jspb.Message.getFieldWithDefault(msg, 6, 0),
    minValidPerWindow: jspb.Message.getFieldWithDefault(msg, 7, ""),
    lookbackDuration: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.oracle.Params}
 */
proto.seiprotocol.seichain.oracle.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.oracle.Params;
  return proto.seiprotocol.seichain.oracle.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.oracle.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.oracle.Params}
 */
proto.seiprotocol.seichain.oracle.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVotePeriod(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoteThreshold(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRewardBand(value);
      break;
    case 4:
      var value = new proto.seiprotocol.seichain.oracle.Denom;
      reader.readMessage(value,proto.seiprotocol.seichain.oracle.Denom.deserializeBinaryFromReader);
      msg.addWhitelist(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlashFraction(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSlashWindow(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinValidPerWindow(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLookbackDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.oracle.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.oracle.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.oracle.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotePeriod();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getVoteThreshold();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRewardBand();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWhitelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.seiprotocol.seichain.oracle.Denom.serializeBinaryToWriter
    );
  }
  f = message.getSlashFraction();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSlashWindow();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMinValidPerWindow();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLookbackDuration();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional uint64 vote_period = 1;
 * @return {number}
 */
proto.seiprotocol.seichain.oracle.Params.prototype.getVotePeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.oracle.Params} returns this
 */
proto.seiprotocol.seichain.oracle.Params.prototype.setVotePeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string vote_threshold = 2;
 * @return {string}
 */
proto.seiprotocol.seichain.oracle.Params.prototype.getVoteThreshold = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.oracle.Params} returns this
 */
proto.seiprotocol.seichain.oracle.Params.prototype.setVoteThreshold = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string reward_band = 3;
 * @return {string}
 */
proto.seiprotocol.seichain.oracle.Params.prototype.getRewardBand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.oracle.Params} returns this
 */
proto.seiprotocol.seichain.oracle.Params.prototype.setRewardBand = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Denom whitelist = 4;
 * @return {!Array<!proto.seiprotocol.seichain.oracle.Denom>}
 */
proto.seiprotocol.seichain.oracle.Params.prototype.getWhitelistList = function() {
  return /** @type{!Array<!proto.seiprotocol.seichain.oracle.Denom>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seiprotocol.seichain.oracle.Denom, 4));
};


/**
 * @param {!Array<!proto.seiprotocol.seichain.oracle.Denom>} value
 * @return {!proto.seiprotocol.seichain.oracle.Params} returns this
*/
proto.seiprotocol.seichain.oracle.Params.prototype.setWhitelistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.seiprotocol.seichain.oracle.Denom=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.oracle.Denom}
 */
proto.seiprotocol.seichain.oracle.Params.prototype.addWhitelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.seiprotocol.seichain.oracle.Denom, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.oracle.Params} returns this
 */
proto.seiprotocol.seichain.oracle.Params.prototype.clearWhitelistList = function() {
  return this.setWhitelistList([]);
};


/**
 * optional string slash_fraction = 5;
 * @return {string}
 */
proto.seiprotocol.seichain.oracle.Params.prototype.getSlashFraction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.oracle.Params} returns this
 */
proto.seiprotocol.seichain.oracle.Params.prototype.setSlashFraction = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 slash_window = 6;
 * @return {number}
 */
proto.seiprotocol.seichain.oracle.Params.prototype.getSlashWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.oracle.Params} returns this
 */
proto.seiprotocol.seichain.oracle.Params.prototype.setSlashWindow = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string min_valid_per_window = 7;
 * @return {string}
 */
proto.seiprotocol.seichain.oracle.Params.prototype.getMinValidPerWindow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.oracle.Params} returns this
 */
proto.seiprotocol.seichain.oracle.Params.prototype.setMinValidPerWindow = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 lookback_duration = 9;
 * @return {number}
 */
proto.seiprotocol.seichain.oracle.Params.prototype.getLookbackDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.oracle.Params} returns this
 */
proto.seiprotocol.seichain.oracle.Params.prototype.setLookbackDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.oracle.Denom.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.oracle.Denom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.oracle.Denom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.Denom.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.oracle.Denom}
 */
proto.seiprotocol.seichain.oracle.Denom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.oracle.Denom;
  return proto.seiprotocol.seichain.oracle.Denom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.oracle.Denom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.oracle.Denom}
 */
proto.seiprotocol.seichain.oracle.Denom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.oracle.Denom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.oracle.Denom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.oracle.Denom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.Denom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.oracle.Denom.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.oracle.Denom} returns this
 */
proto.seiprotocol.seichain.oracle.Denom.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    exchangeRateTuplesList: jspb.Message.toObjectList(msg.getExchangeRateTuplesList(),
    proto.seiprotocol.seichain.oracle.ExchangeRateTuple.toObject, includeInstance),
    voter: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote}
 */
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote;
  return proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote}
 */
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.seiprotocol.seichain.oracle.ExchangeRateTuple;
      reader.readMessage(value,proto.seiprotocol.seichain.oracle.ExchangeRateTuple.deserializeBinaryFromReader);
      msg.addExchangeRateTuples(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExchangeRateTuplesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.seiprotocol.seichain.oracle.ExchangeRateTuple.serializeBinaryToWriter
    );
  }
  f = message.getVoter();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated ExchangeRateTuple exchange_rate_tuples = 1;
 * @return {!Array<!proto.seiprotocol.seichain.oracle.ExchangeRateTuple>}
 */
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.prototype.getExchangeRateTuplesList = function() {
  return /** @type{!Array<!proto.seiprotocol.seichain.oracle.ExchangeRateTuple>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seiprotocol.seichain.oracle.ExchangeRateTuple, 1));
};


/**
 * @param {!Array<!proto.seiprotocol.seichain.oracle.ExchangeRateTuple>} value
 * @return {!proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote} returns this
*/
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.prototype.setExchangeRateTuplesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.seiprotocol.seichain.oracle.ExchangeRateTuple=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.oracle.ExchangeRateTuple}
 */
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.prototype.addExchangeRateTuples = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.seiprotocol.seichain.oracle.ExchangeRateTuple, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote} returns this
 */
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.prototype.clearExchangeRateTuplesList = function() {
  return this.setExchangeRateTuplesList([]);
};


/**
 * optional string voter = 2;
 * @return {string}
 */
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.prototype.getVoter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote} returns this
 */
proto.seiprotocol.seichain.oracle.AggregateExchangeRateVote.prototype.setVoter = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.oracle.ExchangeRateTuple.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.oracle.ExchangeRateTuple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.oracle.ExchangeRateTuple} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.ExchangeRateTuple.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    exchangeRate: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.oracle.ExchangeRateTuple}
 */
proto.seiprotocol.seichain.oracle.ExchangeRateTuple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.oracle.ExchangeRateTuple;
  return proto.seiprotocol.seichain.oracle.ExchangeRateTuple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.oracle.ExchangeRateTuple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.oracle.ExchangeRateTuple}
 */
proto.seiprotocol.seichain.oracle.ExchangeRateTuple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchangeRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.oracle.ExchangeRateTuple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.oracle.ExchangeRateTuple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.oracle.ExchangeRateTuple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.ExchangeRateTuple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExchangeRate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.oracle.ExchangeRateTuple.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.oracle.ExchangeRateTuple} returns this
 */
proto.seiprotocol.seichain.oracle.ExchangeRateTuple.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string exchange_rate = 2;
 * @return {string}
 */
proto.seiprotocol.seichain.oracle.ExchangeRateTuple.prototype.getExchangeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.oracle.ExchangeRateTuple} returns this
 */
proto.seiprotocol.seichain.oracle.ExchangeRateTuple.prototype.setExchangeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.oracle.OracleExchangeRate.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.oracle.OracleExchangeRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.oracle.OracleExchangeRate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.OracleExchangeRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    exchangeRate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastUpdate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastUpdateTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.oracle.OracleExchangeRate}
 */
proto.seiprotocol.seichain.oracle.OracleExchangeRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.oracle.OracleExchangeRate;
  return proto.seiprotocol.seichain.oracle.OracleExchangeRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.oracle.OracleExchangeRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.oracle.OracleExchangeRate}
 */
proto.seiprotocol.seichain.oracle.OracleExchangeRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExchangeRate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastUpdate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastUpdateTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.oracle.OracleExchangeRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.oracle.OracleExchangeRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.oracle.OracleExchangeRate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.OracleExchangeRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExchangeRate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastUpdate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastUpdateTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string exchange_rate = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.oracle.OracleExchangeRate.prototype.getExchangeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.oracle.OracleExchangeRate} returns this
 */
proto.seiprotocol.seichain.oracle.OracleExchangeRate.prototype.setExchangeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string last_update = 2;
 * @return {string}
 */
proto.seiprotocol.seichain.oracle.OracleExchangeRate.prototype.getLastUpdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.oracle.OracleExchangeRate} returns this
 */
proto.seiprotocol.seichain.oracle.OracleExchangeRate.prototype.setLastUpdate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 last_update_timestamp = 3;
 * @return {number}
 */
proto.seiprotocol.seichain.oracle.OracleExchangeRate.prototype.getLastUpdateTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.oracle.OracleExchangeRate} returns this
 */
proto.seiprotocol.seichain.oracle.OracleExchangeRate.prototype.setLastUpdateTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshotItem.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.oracle.PriceSnapshotItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.oracle.PriceSnapshotItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.PriceSnapshotItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    oracleExchangeRate: (f = msg.getOracleExchangeRate()) && proto.seiprotocol.seichain.oracle.OracleExchangeRate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.oracle.PriceSnapshotItem}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshotItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.oracle.PriceSnapshotItem;
  return proto.seiprotocol.seichain.oracle.PriceSnapshotItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.oracle.PriceSnapshotItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.oracle.PriceSnapshotItem}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshotItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = new proto.seiprotocol.seichain.oracle.OracleExchangeRate;
      reader.readMessage(value,proto.seiprotocol.seichain.oracle.OracleExchangeRate.deserializeBinaryFromReader);
      msg.setOracleExchangeRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshotItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.oracle.PriceSnapshotItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.oracle.PriceSnapshotItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.PriceSnapshotItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOracleExchangeRate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.seiprotocol.seichain.oracle.OracleExchangeRate.serializeBinaryToWriter
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshotItem.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.oracle.PriceSnapshotItem} returns this
 */
proto.seiprotocol.seichain.oracle.PriceSnapshotItem.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OracleExchangeRate oracle_exchange_rate = 2;
 * @return {?proto.seiprotocol.seichain.oracle.OracleExchangeRate}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshotItem.prototype.getOracleExchangeRate = function() {
  return /** @type{?proto.seiprotocol.seichain.oracle.OracleExchangeRate} */ (
    jspb.Message.getWrapperField(this, proto.seiprotocol.seichain.oracle.OracleExchangeRate, 2));
};


/**
 * @param {?proto.seiprotocol.seichain.oracle.OracleExchangeRate|undefined} value
 * @return {!proto.seiprotocol.seichain.oracle.PriceSnapshotItem} returns this
*/
proto.seiprotocol.seichain.oracle.PriceSnapshotItem.prototype.setOracleExchangeRate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seiprotocol.seichain.oracle.PriceSnapshotItem} returns this
 */
proto.seiprotocol.seichain.oracle.PriceSnapshotItem.prototype.clearOracleExchangeRate = function() {
  return this.setOracleExchangeRate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshotItem.prototype.hasOracleExchangeRate = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seiprotocol.seichain.oracle.PriceSnapshot.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.oracle.PriceSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.oracle.PriceSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.PriceSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    snapshotTimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    priceSnapshotItemsList: jspb.Message.toObjectList(msg.getPriceSnapshotItemsList(),
    proto.seiprotocol.seichain.oracle.PriceSnapshotItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.oracle.PriceSnapshot}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.oracle.PriceSnapshot;
  return proto.seiprotocol.seichain.oracle.PriceSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.oracle.PriceSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.oracle.PriceSnapshot}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSnapshotTimestamp(value);
      break;
    case 2:
      var value = new proto.seiprotocol.seichain.oracle.PriceSnapshotItem;
      reader.readMessage(value,proto.seiprotocol.seichain.oracle.PriceSnapshotItem.deserializeBinaryFromReader);
      msg.addPriceSnapshotItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.oracle.PriceSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.oracle.PriceSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.PriceSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSnapshotTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPriceSnapshotItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.seiprotocol.seichain.oracle.PriceSnapshotItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 snapshot_timestamp = 1;
 * @return {number}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshot.prototype.getSnapshotTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.oracle.PriceSnapshot} returns this
 */
proto.seiprotocol.seichain.oracle.PriceSnapshot.prototype.setSnapshotTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated PriceSnapshotItem price_snapshot_items = 2;
 * @return {!Array<!proto.seiprotocol.seichain.oracle.PriceSnapshotItem>}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshot.prototype.getPriceSnapshotItemsList = function() {
  return /** @type{!Array<!proto.seiprotocol.seichain.oracle.PriceSnapshotItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seiprotocol.seichain.oracle.PriceSnapshotItem, 2));
};


/**
 * @param {!Array<!proto.seiprotocol.seichain.oracle.PriceSnapshotItem>} value
 * @return {!proto.seiprotocol.seichain.oracle.PriceSnapshot} returns this
*/
proto.seiprotocol.seichain.oracle.PriceSnapshot.prototype.setPriceSnapshotItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.seiprotocol.seichain.oracle.PriceSnapshotItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.oracle.PriceSnapshotItem}
 */
proto.seiprotocol.seichain.oracle.PriceSnapshot.prototype.addPriceSnapshotItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.seiprotocol.seichain.oracle.PriceSnapshotItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.oracle.PriceSnapshot} returns this
 */
proto.seiprotocol.seichain.oracle.PriceSnapshot.prototype.clearPriceSnapshotItemsList = function() {
  return this.setPriceSnapshotItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.oracle.OracleTwap.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.oracle.OracleTwap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.oracle.OracleTwap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.OracleTwap.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    twap: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lookbackSeconds: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.oracle.OracleTwap}
 */
proto.seiprotocol.seichain.oracle.OracleTwap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.oracle.OracleTwap;
  return proto.seiprotocol.seichain.oracle.OracleTwap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.oracle.OracleTwap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.oracle.OracleTwap}
 */
proto.seiprotocol.seichain.oracle.OracleTwap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTwap(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLookbackSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.oracle.OracleTwap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.oracle.OracleTwap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.oracle.OracleTwap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.OracleTwap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTwap();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLookbackSeconds();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.oracle.OracleTwap.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.oracle.OracleTwap} returns this
 */
proto.seiprotocol.seichain.oracle.OracleTwap.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string twap = 2;
 * @return {string}
 */
proto.seiprotocol.seichain.oracle.OracleTwap.prototype.getTwap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.oracle.OracleTwap} returns this
 */
proto.seiprotocol.seichain.oracle.OracleTwap.prototype.setTwap = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 lookback_seconds = 3;
 * @return {number}
 */
proto.seiprotocol.seichain.oracle.OracleTwap.prototype.getLookbackSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.oracle.OracleTwap} returns this
 */
proto.seiprotocol.seichain.oracle.OracleTwap.prototype.setLookbackSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.oracle.VotePenaltyCounter.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.oracle.VotePenaltyCounter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.oracle.VotePenaltyCounter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.VotePenaltyCounter.toObject = function(includeInstance, msg) {
  var f, obj = {
    missCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    abstainCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    successCount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.oracle.VotePenaltyCounter}
 */
proto.seiprotocol.seichain.oracle.VotePenaltyCounter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.oracle.VotePenaltyCounter;
  return proto.seiprotocol.seichain.oracle.VotePenaltyCounter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.oracle.VotePenaltyCounter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.oracle.VotePenaltyCounter}
 */
proto.seiprotocol.seichain.oracle.VotePenaltyCounter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMissCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAbstainCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSuccessCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.oracle.VotePenaltyCounter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.oracle.VotePenaltyCounter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.oracle.VotePenaltyCounter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.oracle.VotePenaltyCounter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMissCount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAbstainCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSuccessCount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 miss_count = 1;
 * @return {number}
 */
proto.seiprotocol.seichain.oracle.VotePenaltyCounter.prototype.getMissCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.oracle.VotePenaltyCounter} returns this
 */
proto.seiprotocol.seichain.oracle.VotePenaltyCounter.prototype.setMissCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 abstain_count = 2;
 * @return {number}
 */
proto.seiprotocol.seichain.oracle.VotePenaltyCounter.prototype.getAbstainCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.oracle.VotePenaltyCounter} returns this
 */
proto.seiprotocol.seichain.oracle.VotePenaltyCounter.prototype.setAbstainCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 success_count = 3;
 * @return {number}
 */
proto.seiprotocol.seichain.oracle.VotePenaltyCounter.prototype.getSuccessCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.oracle.VotePenaltyCounter} returns this
 */
proto.seiprotocol.seichain.oracle.VotePenaltyCounter.prototype.setSuccessCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.seiprotocol.seichain.oracle);
