// source: evm/genesis.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var gogoproto_gogo_pb = require('../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var evm_params_pb = require('../evm/params_pb.js');
goog.object.extend(proto, evm_params_pb);
goog.exportSymbol('proto.seiprotocol.seichain.evm.AddressAssociation', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.evm.Code', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.evm.ContractState', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.evm.GenesisState', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.evm.Nonce', null, global);
goog.exportSymbol('proto.seiprotocol.seichain.evm.Serialized', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.evm.AddressAssociation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.evm.AddressAssociation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.evm.AddressAssociation.displayName = 'proto.seiprotocol.seichain.evm.AddressAssociation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.evm.Code = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.evm.Code, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.evm.Code.displayName = 'proto.seiprotocol.seichain.evm.Code';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.evm.ContractState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.evm.ContractState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.evm.ContractState.displayName = 'proto.seiprotocol.seichain.evm.ContractState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.evm.Nonce = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.evm.Nonce, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.evm.Nonce.displayName = 'proto.seiprotocol.seichain.evm.Nonce';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.evm.Serialized = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.seiprotocol.seichain.evm.Serialized, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.evm.Serialized.displayName = 'proto.seiprotocol.seichain.evm.Serialized';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.seiprotocol.seichain.evm.GenesisState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.seiprotocol.seichain.evm.GenesisState.repeatedFields_, null);
};
goog.inherits(proto.seiprotocol.seichain.evm.GenesisState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.seiprotocol.seichain.evm.GenesisState.displayName = 'proto.seiprotocol.seichain.evm.GenesisState';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.evm.AddressAssociation.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.evm.AddressAssociation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.evm.AddressAssociation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.evm.AddressAssociation.toObject = function(includeInstance, msg) {
  var f, obj = {
    seiAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ethAddress: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.evm.AddressAssociation}
 */
proto.seiprotocol.seichain.evm.AddressAssociation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.evm.AddressAssociation;
  return proto.seiprotocol.seichain.evm.AddressAssociation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.evm.AddressAssociation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.evm.AddressAssociation}
 */
proto.seiprotocol.seichain.evm.AddressAssociation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeiAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.evm.AddressAssociation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.evm.AddressAssociation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.evm.AddressAssociation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.evm.AddressAssociation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeiAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEthAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sei_address = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.evm.AddressAssociation.prototype.getSeiAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.evm.AddressAssociation} returns this
 */
proto.seiprotocol.seichain.evm.AddressAssociation.prototype.setSeiAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string eth_address = 2;
 * @return {string}
 */
proto.seiprotocol.seichain.evm.AddressAssociation.prototype.getEthAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.evm.AddressAssociation} returns this
 */
proto.seiprotocol.seichain.evm.AddressAssociation.prototype.setEthAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.evm.Code.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.evm.Code.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.evm.Code} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.evm.Code.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: msg.getCode_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.evm.Code}
 */
proto.seiprotocol.seichain.evm.Code.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.evm.Code;
  return proto.seiprotocol.seichain.evm.Code.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.evm.Code} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.evm.Code}
 */
proto.seiprotocol.seichain.evm.Code.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.evm.Code.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.evm.Code.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.evm.Code} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.evm.Code.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.evm.Code.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.evm.Code} returns this
 */
proto.seiprotocol.seichain.evm.Code.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes code = 2;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.evm.Code.prototype.getCode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes code = 2;
 * This is a type-conversion wrapper around `getCode()`
 * @return {string}
 */
proto.seiprotocol.seichain.evm.Code.prototype.getCode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCode()));
};


/**
 * optional bytes code = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCode()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.evm.Code.prototype.getCode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.evm.Code} returns this
 */
proto.seiprotocol.seichain.evm.Code.prototype.setCode = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.evm.ContractState.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.evm.ContractState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.evm.ContractState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.evm.ContractState.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.evm.ContractState}
 */
proto.seiprotocol.seichain.evm.ContractState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.evm.ContractState;
  return proto.seiprotocol.seichain.evm.ContractState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.evm.ContractState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.evm.ContractState}
 */
proto.seiprotocol.seichain.evm.ContractState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.evm.ContractState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.evm.ContractState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.evm.ContractState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.evm.ContractState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.evm.ContractState.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.evm.ContractState} returns this
 */
proto.seiprotocol.seichain.evm.ContractState.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.evm.ContractState.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.seiprotocol.seichain.evm.ContractState.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.evm.ContractState.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.evm.ContractState} returns this
 */
proto.seiprotocol.seichain.evm.ContractState.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes value = 3;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.evm.ContractState.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes value = 3;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.seiprotocol.seichain.evm.ContractState.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.evm.ContractState.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.evm.ContractState} returns this
 */
proto.seiprotocol.seichain.evm.ContractState.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.evm.Nonce.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.evm.Nonce.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.evm.Nonce} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.evm.Nonce.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.evm.Nonce}
 */
proto.seiprotocol.seichain.evm.Nonce.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.evm.Nonce;
  return proto.seiprotocol.seichain.evm.Nonce.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.evm.Nonce} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.evm.Nonce}
 */
proto.seiprotocol.seichain.evm.Nonce.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.evm.Nonce.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.evm.Nonce.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.evm.Nonce} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.evm.Nonce.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.seiprotocol.seichain.evm.Nonce.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.seiprotocol.seichain.evm.Nonce} returns this
 */
proto.seiprotocol.seichain.evm.Nonce.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.seiprotocol.seichain.evm.Nonce.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.seiprotocol.seichain.evm.Nonce} returns this
 */
proto.seiprotocol.seichain.evm.Nonce.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.evm.Serialized.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.evm.Serialized} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.evm.Serialized.toObject = function(includeInstance, msg) {
  var f, obj = {
    prefix: msg.getPrefix_asB64(),
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.evm.Serialized}
 */
proto.seiprotocol.seichain.evm.Serialized.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.evm.Serialized;
  return proto.seiprotocol.seichain.evm.Serialized.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.evm.Serialized} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.evm.Serialized}
 */
proto.seiprotocol.seichain.evm.Serialized.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrefix(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.evm.Serialized.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.evm.Serialized} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.evm.Serialized.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrefix_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes prefix = 1;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.getPrefix = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes prefix = 1;
 * This is a type-conversion wrapper around `getPrefix()`
 * @return {string}
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.getPrefix_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrefix()));
};


/**
 * optional bytes prefix = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrefix()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.getPrefix_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrefix()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.evm.Serialized} returns this
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.setPrefix = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.evm.Serialized} returns this
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes value = 3;
 * @return {!(string|Uint8Array)}
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes value = 3;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.seiprotocol.seichain.evm.Serialized} returns this
 */
proto.seiprotocol.seichain.evm.Serialized.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.seiprotocol.seichain.evm.GenesisState.repeatedFields_ = [2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.toObject = function(opt_includeInstance) {
  return proto.seiprotocol.seichain.evm.GenesisState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.seiprotocol.seichain.evm.GenesisState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.evm.GenesisState.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: (f = msg.getParams()) && evm_params_pb.Params.toObject(includeInstance, f),
    addressAssociationsList: jspb.Message.toObjectList(msg.getAddressAssociationsList(),
    proto.seiprotocol.seichain.evm.AddressAssociation.toObject, includeInstance),
    codesList: jspb.Message.toObjectList(msg.getCodesList(),
    proto.seiprotocol.seichain.evm.Code.toObject, includeInstance),
    statesList: jspb.Message.toObjectList(msg.getStatesList(),
    proto.seiprotocol.seichain.evm.ContractState.toObject, includeInstance),
    noncesList: jspb.Message.toObjectList(msg.getNoncesList(),
    proto.seiprotocol.seichain.evm.Nonce.toObject, includeInstance),
    serializedList: jspb.Message.toObjectList(msg.getSerializedList(),
    proto.seiprotocol.seichain.evm.Serialized.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.seiprotocol.seichain.evm.GenesisState}
 */
proto.seiprotocol.seichain.evm.GenesisState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.seiprotocol.seichain.evm.GenesisState;
  return proto.seiprotocol.seichain.evm.GenesisState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.seiprotocol.seichain.evm.GenesisState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.seiprotocol.seichain.evm.GenesisState}
 */
proto.seiprotocol.seichain.evm.GenesisState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new evm_params_pb.Params;
      reader.readMessage(value,evm_params_pb.Params.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    case 2:
      var value = new proto.seiprotocol.seichain.evm.AddressAssociation;
      reader.readMessage(value,proto.seiprotocol.seichain.evm.AddressAssociation.deserializeBinaryFromReader);
      msg.addAddressAssociations(value);
      break;
    case 3:
      var value = new proto.seiprotocol.seichain.evm.Code;
      reader.readMessage(value,proto.seiprotocol.seichain.evm.Code.deserializeBinaryFromReader);
      msg.addCodes(value);
      break;
    case 4:
      var value = new proto.seiprotocol.seichain.evm.ContractState;
      reader.readMessage(value,proto.seiprotocol.seichain.evm.ContractState.deserializeBinaryFromReader);
      msg.addStates(value);
      break;
    case 5:
      var value = new proto.seiprotocol.seichain.evm.Nonce;
      reader.readMessage(value,proto.seiprotocol.seichain.evm.Nonce.deserializeBinaryFromReader);
      msg.addNonces(value);
      break;
    case 6:
      var value = new proto.seiprotocol.seichain.evm.Serialized;
      reader.readMessage(value,proto.seiprotocol.seichain.evm.Serialized.deserializeBinaryFromReader);
      msg.addSerialized(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.seiprotocol.seichain.evm.GenesisState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.seiprotocol.seichain.evm.GenesisState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.seiprotocol.seichain.evm.GenesisState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      evm_params_pb.Params.serializeBinaryToWriter
    );
  }
  f = message.getAddressAssociationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.seiprotocol.seichain.evm.AddressAssociation.serializeBinaryToWriter
    );
  }
  f = message.getCodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.seiprotocol.seichain.evm.Code.serializeBinaryToWriter
    );
  }
  f = message.getStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.seiprotocol.seichain.evm.ContractState.serializeBinaryToWriter
    );
  }
  f = message.getNoncesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.seiprotocol.seichain.evm.Nonce.serializeBinaryToWriter
    );
  }
  f = message.getSerializedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.seiprotocol.seichain.evm.Serialized.serializeBinaryToWriter
    );
  }
};


/**
 * optional Params params = 1;
 * @return {?proto.seiprotocol.seichain.evm.Params}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.getParams = function() {
  return /** @type{?proto.seiprotocol.seichain.evm.Params} */ (
    jspb.Message.getWrapperField(this, evm_params_pb.Params, 1));
};


/**
 * @param {?proto.seiprotocol.seichain.evm.Params|undefined} value
 * @return {!proto.seiprotocol.seichain.evm.GenesisState} returns this
*/
proto.seiprotocol.seichain.evm.GenesisState.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.seiprotocol.seichain.evm.GenesisState} returns this
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AddressAssociation address_associations = 2;
 * @return {!Array<!proto.seiprotocol.seichain.evm.AddressAssociation>}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.getAddressAssociationsList = function() {
  return /** @type{!Array<!proto.seiprotocol.seichain.evm.AddressAssociation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seiprotocol.seichain.evm.AddressAssociation, 2));
};


/**
 * @param {!Array<!proto.seiprotocol.seichain.evm.AddressAssociation>} value
 * @return {!proto.seiprotocol.seichain.evm.GenesisState} returns this
*/
proto.seiprotocol.seichain.evm.GenesisState.prototype.setAddressAssociationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.seiprotocol.seichain.evm.AddressAssociation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.evm.AddressAssociation}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.addAddressAssociations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.seiprotocol.seichain.evm.AddressAssociation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.evm.GenesisState} returns this
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.clearAddressAssociationsList = function() {
  return this.setAddressAssociationsList([]);
};


/**
 * repeated Code codes = 3;
 * @return {!Array<!proto.seiprotocol.seichain.evm.Code>}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.getCodesList = function() {
  return /** @type{!Array<!proto.seiprotocol.seichain.evm.Code>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seiprotocol.seichain.evm.Code, 3));
};


/**
 * @param {!Array<!proto.seiprotocol.seichain.evm.Code>} value
 * @return {!proto.seiprotocol.seichain.evm.GenesisState} returns this
*/
proto.seiprotocol.seichain.evm.GenesisState.prototype.setCodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.seiprotocol.seichain.evm.Code=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.evm.Code}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.addCodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.seiprotocol.seichain.evm.Code, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.evm.GenesisState} returns this
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.clearCodesList = function() {
  return this.setCodesList([]);
};


/**
 * repeated ContractState states = 4;
 * @return {!Array<!proto.seiprotocol.seichain.evm.ContractState>}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.getStatesList = function() {
  return /** @type{!Array<!proto.seiprotocol.seichain.evm.ContractState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seiprotocol.seichain.evm.ContractState, 4));
};


/**
 * @param {!Array<!proto.seiprotocol.seichain.evm.ContractState>} value
 * @return {!proto.seiprotocol.seichain.evm.GenesisState} returns this
*/
proto.seiprotocol.seichain.evm.GenesisState.prototype.setStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.seiprotocol.seichain.evm.ContractState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.evm.ContractState}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.addStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.seiprotocol.seichain.evm.ContractState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.evm.GenesisState} returns this
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.clearStatesList = function() {
  return this.setStatesList([]);
};


/**
 * repeated Nonce nonces = 5;
 * @return {!Array<!proto.seiprotocol.seichain.evm.Nonce>}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.getNoncesList = function() {
  return /** @type{!Array<!proto.seiprotocol.seichain.evm.Nonce>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seiprotocol.seichain.evm.Nonce, 5));
};


/**
 * @param {!Array<!proto.seiprotocol.seichain.evm.Nonce>} value
 * @return {!proto.seiprotocol.seichain.evm.GenesisState} returns this
*/
proto.seiprotocol.seichain.evm.GenesisState.prototype.setNoncesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.seiprotocol.seichain.evm.Nonce=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.evm.Nonce}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.addNonces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.seiprotocol.seichain.evm.Nonce, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.evm.GenesisState} returns this
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.clearNoncesList = function() {
  return this.setNoncesList([]);
};


/**
 * repeated Serialized serialized = 6;
 * @return {!Array<!proto.seiprotocol.seichain.evm.Serialized>}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.getSerializedList = function() {
  return /** @type{!Array<!proto.seiprotocol.seichain.evm.Serialized>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.seiprotocol.seichain.evm.Serialized, 6));
};


/**
 * @param {!Array<!proto.seiprotocol.seichain.evm.Serialized>} value
 * @return {!proto.seiprotocol.seichain.evm.GenesisState} returns this
*/
proto.seiprotocol.seichain.evm.GenesisState.prototype.setSerializedList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.seiprotocol.seichain.evm.Serialized=} opt_value
 * @param {number=} opt_index
 * @return {!proto.seiprotocol.seichain.evm.Serialized}
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.addSerialized = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.seiprotocol.seichain.evm.Serialized, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.seiprotocol.seichain.evm.GenesisState} returns this
 */
proto.seiprotocol.seichain.evm.GenesisState.prototype.clearSerializedList = function() {
  return this.setSerializedList([]);
};


goog.object.extend(exports, proto.seiprotocol.seichain.evm);
